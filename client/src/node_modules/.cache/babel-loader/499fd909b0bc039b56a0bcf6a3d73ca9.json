{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/web-dev-projects/wault/src/App.js\";\nimport React, { Component } from \"react\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport './App.css';\nimport { Button, Avatar, Drawer, Divider } from \"@material-ui/core\";\nimport NavBar from \"./components/NavBar\";\nimport SearchBar from './components/SearchBar';\nconst spotifyWebApi = new SpotifyWebApi();\n\nconst styles = theme => ({\n  root: {\n    display: 'flex' //   alignItems: 'center'\n\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: 'flex',\n    alignItems: 'center'\n  },\n  drawerHeader: {\n    display: 'flex',\n    width: '100%',\n    alignItems: 'center',\n    padding: 'theme.spacing(0, 1)',\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end'\n  },\n  content: {\n    flexGrow: 1,\n    height: `calc(100vh - 64px)`,\n    padding: 0,\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nconst drawerWidth = '400px';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyWebApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      user: {},\n      userImage: '',\n      nowPlaying: {\n        name: 'Not Checked',\n        albumArt: ''\n      },\n      currentSong: {},\n      likedSongs: [],\n      open: false\n    };\n    this.updateLikes = this.updateLikes.bind(this);\n    this.updateCurrent = this.updateCurrent.bind(this);\n    this.playSong = this.playSong.bind(this);\n    this.openMenu = this.openMenu.bind(this);\n  }\n\n  componentDidMount() {\n    //Get User \n    spotifyWebApi.getMe().then(response => {\n      this.setState({\n        user: response,\n        userImage: response.images[0].url\n      });\n      console.log(response);\n    }); // this.getMe();\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  getMe() {\n    spotifyWebApi.getMe().then(response => {\n      this.setState({\n        user: response,\n        userImage: response.images[0].url\n      });\n      console.log(response);\n    });\n  }\n\n  getNowPlaying() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      if (response) {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url\n          }\n        });\n      }\n    });\n  }\n\n  openMenu(drawerStatus) {\n    this.setState({\n      open: drawerStatus\n    });\n  }\n  /**\n  * Handles adding selected song to likedSongs\n  * @param {*} likedSong - song to add\n  */\n\n\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong);\n    } else {\n      likedSongs.push(likedSong);\n    }\n\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n  /**\n   * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n   * @param {*} song - song to play\n   */\n\n\n  playSong(song) {\n    console.log(song || 'Resume');\n\n    if (!song) {\n      spotifyWebApi.play();\n    } else {\n      let songs = {\n        'uris': [`${song.uri}`]\n      };\n      spotifyWebApi.play(songs);\n    }\n  }\n\n  updateCurrent(song) {\n    console.log(song);\n    this.setState({\n      currentSong: song\n    });\n  }\n\n  render() {\n    const {\n      userImage\n    } = this.state;\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      user: this.state.user,\n      openMenu: this.openMenu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, \"Login to Spotify \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, \"User: \", this.state.user.display_name, /*#__PURE__*/React.createElement(Avatar, {\n      src: userImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }), \"Now Playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(SearchBar, {\n      token: spotifyWebApi.getAccessToken(),\n      updateLikes: this.updateLikes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.albumArt,\n      style: {\n        height: 150\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    })), this.state.loggedIn && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.getNowPlaying(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, \"Check Now Playing\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.getMe(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }\n    }, \"Get me\"), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"right\",\n      open: this.state.open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"main\", {\n      className: clsx(classes.content, {\n        [classes.contentShift]: this.state.open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }))));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["/Users/brianlai/Desktop/web-dev-projects/wault/src/App.js"],"names":["React","Component","SpotifyWebApi","withStyles","clsx","Button","Avatar","Drawer","Divider","NavBar","SearchBar","spotifyWebApi","styles","theme","root","display","drawer","width","drawerWidth","flexShrink","drawerPaper","alignItems","drawerHeader","padding","mixins","toolbar","justifyContent","content","flexGrow","height","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","App","constructor","params","getHashParams","token","access_token","setAccessToken","state","loggedIn","user","userImage","nowPlaying","name","albumArt","currentSong","likedSongs","open","updateLikes","bind","updateCurrent","playSong","openMenu","componentDidMount","getMe","then","response","setState","images","url","console","log","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","item","album","drawerStatus","likedSong","length","shift","push","song","play","songs","uri","render","classes","props","display_name","getAccessToken","paper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport './App.css'\nimport { Button, Avatar, Drawer, Divider } from \"@material-ui/core\";\nimport NavBar from \"./components/NavBar\";\nimport SearchBar from './components/SearchBar';\n\nconst spotifyWebApi = new SpotifyWebApi();\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n      //   alignItems: 'center'\n      },\n      drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n      drawerPaper: {\n        width: drawerWidth,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      drawerHeader: {\n        display: 'flex',\n        width: '100%',\n        alignItems: 'center',\n        padding: 'theme.spacing(0, 1)',\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n      },\n      content: {\n        flexGrow: 1,\n        height: `calc(100vh - 64px)`,\n        padding: 0,\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n      },\n      contentShift: {\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n      },\n});\nconst drawerWidth = '400px'\n\nclass App extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const token = params.access_token;\n        if (token) {\n        spotifyWebApi.setAccessToken(token);\n        }\n        this.state = {\n            loggedIn: token ? true : false,\n            user: {},\n            userImage: '',\n            nowPlaying: { name: 'Not Checked', albumArt: '' },\n            currentSong: {},\n            likedSongs: [],\n            open: false\n        }\n        this.updateLikes = this.updateLikes.bind(this);\n        this.updateCurrent = this.updateCurrent.bind(this);\n        this.playSong = this.playSong.bind(this);\n        this.openMenu = this.openMenu.bind(this);\n    }\n\n    componentDidMount() {\n\n        //Get User \n        spotifyWebApi.getMe()\n        .then((response) => {\n            this.setState({\n            user: response,\n            userImage: response.images[0].url\n            })\n            console.log(response);\n        })\n        // this.getMe();\n    }\n\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    getMe() {\n        spotifyWebApi.getMe()\n        .then((response) => {\n            this.setState({\n            user: response,\n            userImage: response.images[0].url\n            })\n            console.log(response);\n        })\n    }\n\n    getNowPlaying(){\n        spotifyWebApi.getMyCurrentPlaybackState()\n        .then((response) => {\n            if (response) {\n            this.setState({\n                nowPlaying: { \n                    name: response.item.name, \n                    albumArt: response.item.album.images[0].url\n                }\n            });\n            }\n        })\n    }\n\n    openMenu(drawerStatus) {\n        this.setState({open: drawerStatus})\n    }\n\n\n    /**\n   * Handles adding selected song to likedSongs\n   * @param {*} likedSong - song to add\n   */\n    updateLikes(likedSong) {\n        let likedSongs = this.state.likedSongs;\n        if (likedSongs.length === 3) {\n            likedSongs.shift();\n            likedSongs.push(likedSong)\n        } else {\n            likedSongs.push(likedSong);\n        }\n            this.setState({\n            likedSongs: [...likedSongs]\n        });\n    }\n\n    /**\n     * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n     * @param {*} song - song to play\n     */\n    playSong(song) {\n        console.log(song || 'Resume');\n        if (!song){\n            spotifyWebApi.play()\n        } else {\n            let songs = {\n                'uris': [`${song.uri}`]\n            };\n            spotifyWebApi.play(songs);\n        }\n    }\n\n    updateCurrent(song) {\n        console.log(song);\n        this.setState({currentSong: song});\n    }\n\n\n    render() {\n        const {userImage} = this.state;\n        const {classes} = this.props;\n        return (\n            <div className=\"App\">\n                <NavBar user={this.state.user} openMenu={this.openMenu}/>\n                <a href='http://localhost:8888/login'>Login to Spotify </a>\n                <div>\n                    User: {this.state.user.display_name}\n                    <Avatar src={userImage}/>\n                    Now Playing: { this.state.nowPlaying.name }\n                </div>\n                <SearchBar token={spotifyWebApi.getAccessToken()} updateLikes={this.updateLikes}/>\n                <div>\n                    <img src={this.state.nowPlaying.albumArt} style={{ height: 150 }} alt=''/>\n                </div>\n                {this.state.loggedIn &&\n                    <div>\n                        <button onClick={() => this.getNowPlaying()}>\n                            Check Now Playing\n                        </button>\n                        <Button variant='contained' color='primary' onClick={() => this.getMe()}>Get me</Button>\n                        <Drawer\n                            className={classes.drawer}\n                            variant=\"persistent\"\n                            anchor=\"right\"\n                            open={this.state.open}\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                        >\n                            \n                            <Divider/>\n\n                        </Drawer>\n                        <main\n                            className={clsx(classes.content, {\n                                [classes.contentShift]: this.state.open,\n                            })}\n                        >\n                            <div className={classes.drawerHeader} />\n                            \n                        </main>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}