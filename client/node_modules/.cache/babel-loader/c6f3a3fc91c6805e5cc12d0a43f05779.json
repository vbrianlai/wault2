{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/web-dev-projects/wault/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport './App.css';\nimport { Button, Avatar, Drawer, Divider } from \"@material-ui/core\";\nimport NavBar from \"./components/NavBar\";\nimport SearchBar from './components/SearchBar';\nimport Room from \"./components/Room\";\nimport Home from \"./Home\";\nimport axios from 'axios';\nconst spotifyWebApi = new SpotifyWebApi();\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyWebApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      user: token ? this.getMe() : {},\n      userImage: '',\n      nowPlaying: {\n        name: 'Not Checked',\n        albumArt: ''\n      },\n      currentSong: {},\n      likedSongs: [],\n      open: false\n    };\n    this.updateLikes = this.updateLikes.bind(this);\n    this.updateCurrent = this.updateCurrent.bind(this);\n    this.playSong = this.playSong.bind(this);\n    this.openMenu = this.openMenu.bind(this);\n  }\n\n  async componentDidMount() {\n    //Get User \n    spotifyWebApi.getMe().then(response => {\n      this.setState({\n        user: response,\n        userImage: response.images[0].url\n      });\n      console.log(response);\n    }); // this.getMe()\n\n    if (this.state.loggedIn) {\n      const data = {\n        // uid: parseInt(this.props.user.id),\n        // display_name: this.props.user.display_name,\n        // email: this.props.user.email,\n        uid: this.state.user.uid,\n        display_name: this.state.user.display_name,\n        email: this.state.user.email\n      };\n      console.log(data);\n      await axios.post('/api/post/newUser', data).then(response => console.log(response)).catch(err => console.log(err));\n    } // this.getMe();\n\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  getMe() {\n    spotifyWebApi.getMe().then(response => {\n      this.setState({\n        user: response,\n        userImage: response.images[0].url\n      });\n      console.log(response);\n    });\n  }\n\n  getNowPlaying() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      if (response) {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url\n          }\n        });\n      }\n    });\n  }\n\n  openMenu(drawerStatus) {\n    this.setState({\n      open: drawerStatus\n    });\n  }\n  /**\n  * Handles adding selected song to likedSongs\n  * @param {*} likedSong - song to add\n  */\n\n\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong);\n    } else {\n      likedSongs.push(likedSong);\n    }\n\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n  /**\n   * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n   * @param {*} song - song to play\n   */\n\n\n  playSong(song) {\n    console.log(song || 'Resume');\n\n    if (!song) {\n      spotifyWebApi.play();\n    } else {\n      let songs = {\n        'uris': [`${song.uri}`]\n      };\n      spotifyWebApi.play(songs);\n    }\n  }\n\n  updateCurrent(song) {\n    console.log(song);\n    this.setState({\n      currentSong: song\n    });\n  }\n\n  render() {\n    const {\n      userImage\n    } = this.state; // const {classes} = this.props;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      user: this.state.user,\n      openMenu: this.openMenu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(SearchBar, {\n      token: spotifyWebApi.getAccessToken(),\n      updateLikes: this.updateLikes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.albumArt,\n      style: {\n        height: 150\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    })), this.state.loggedIn && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Home, {\n      loggedIn: this.state.loggedIn,\n      user: this.state.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Room, {\n      open: this.state.open,\n      user: this.state.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brianlai/Desktop/web-dev-projects/wault/client/src/App.js"],"names":["React","Component","SpotifyWebApi","withStyles","clsx","Button","Avatar","Drawer","Divider","NavBar","SearchBar","Room","Home","axios","spotifyWebApi","App","constructor","params","getHashParams","token","access_token","setAccessToken","state","loggedIn","user","getMe","userImage","nowPlaying","name","albumArt","currentSong","likedSongs","open","updateLikes","bind","updateCurrent","playSong","openMenu","componentDidMount","then","response","setState","images","url","console","log","data","uid","display_name","email","post","catch","err","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","item","album","drawerStatus","likedSong","length","shift","push","song","play","songs","uri","render","getAccessToken","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport './App.css'\nimport { Button, Avatar, Drawer, Divider } from \"@material-ui/core\";\nimport NavBar from \"./components/NavBar\";\nimport SearchBar from './components/SearchBar';\nimport Room from \"./components/Room\";\nimport Home from \"./Home\";\nimport axios from 'axios'\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const token = params.access_token;\n        if (token) {\n        spotifyWebApi.setAccessToken(token);\n        }\n        this.state = {\n            loggedIn: token ? true : false,\n            user: token ? this.getMe() : {},\n            userImage: '',\n            nowPlaying: { name: 'Not Checked', albumArt: '' },\n            currentSong: {},\n            likedSongs: [],\n            open: false\n        }\n        this.updateLikes = this.updateLikes.bind(this);\n        this.updateCurrent = this.updateCurrent.bind(this);\n        this.playSong = this.playSong.bind(this);\n        this.openMenu = this.openMenu.bind(this);\n    }\n\n    async componentDidMount() {\n\n        //Get User \n        spotifyWebApi.getMe()\n        .then((response) => {\n            this.setState({\n            user: response,\n            userImage: response.images[0].url\n            })\n            console.log(response);\n        })\n        // this.getMe()\n        if (this.state.loggedIn) {\n            const data = {\n                // uid: parseInt(this.props.user.id),\n                // display_name: this.props.user.display_name,\n                // email: this.props.user.email,\n                uid: this.state.user.uid,\n                display_name: this.state.user.display_name,\n                email: this.state.user.email,\n            }\n            console.log(data)\n    \n            await axios.post('/api/post/newUser', data)\n                .then(response => console.log(response))\n                .catch(err => console.log(err))\n        }\n        // this.getMe();\n    }\n\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    getMe() {\n        spotifyWebApi.getMe()\n        .then((response) => {\n            this.setState({\n                user: response,\n                userImage: response.images[0].url\n            })\n            console.log(response);\n        })\n    }\n\n    getNowPlaying(){\n        spotifyWebApi.getMyCurrentPlaybackState()\n        .then((response) => {\n            if (response) {\n            this.setState({\n                nowPlaying: { \n                    name: response.item.name, \n                    albumArt: response.item.album.images[0].url\n                }\n            });\n            }\n        })\n    }\n\n    openMenu(drawerStatus) {\n        this.setState({open: drawerStatus})\n    }\n\n\n    /**\n   * Handles adding selected song to likedSongs\n   * @param {*} likedSong - song to add\n   */\n    updateLikes(likedSong) {\n        let likedSongs = this.state.likedSongs;\n        if (likedSongs.length === 3) {\n            likedSongs.shift();\n            likedSongs.push(likedSong)\n        } else {\n            likedSongs.push(likedSong);\n        }\n        this.setState({\n            likedSongs: [...likedSongs]\n        });\n    }\n\n    /**\n     * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n     * @param {*} song - song to play\n     */\n    playSong(song) {\n        console.log(song || 'Resume');\n        if (!song){\n            spotifyWebApi.play()\n        } else {\n            let songs = {\n                'uris': [`${song.uri}`]\n            };\n            spotifyWebApi.play(songs);\n        }\n    }\n\n    updateCurrent(song) {\n        console.log(song);\n        this.setState({currentSong: song});\n    }\n\n\n    render() {\n        const {userImage} = this.state;\n        // const {classes} = this.props;\n        return (\n            <div className=\"App\">\n                <NavBar user={this.state.user} openMenu={this.openMenu}/>\n                \n                <SearchBar token={spotifyWebApi.getAccessToken()} updateLikes={this.updateLikes}/>\n                <div>\n                    <img src={this.state.nowPlaying.albumArt} style={{ height: 150 }} alt=''/>\n                </div>\n                \n                {this.state.loggedIn &&\n                <div>\n                    <Home loggedIn={this.state.loggedIn} user={this.state.user}/>\n                    <Room open={this.state.open} user={this.state.user}/>\n                </div>\n                    \n                }\n            </div>\n        );\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}